#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Di√°logo "Acerca de..." para el Sistema de Alertas Geot√©cnicas
"""

from PySide6.QtWidgets import QDialog, QVBoxLayout, QHBoxLayout, QLabel, QPushButton, QTextEdit
from PySide6.QtCore import Qt
from PySide6.QtGui import QFont, QPixmap

# Importar estilos centralizados
from src.gui.styles import DialogStyles
# Importar versi√≥n actual
from src.utils.version import APP_VERSION

class AboutDialog(QDialog):
    """Di√°logo personalizado para mostrar informaci√≥n sobre la aplicaci√≥n"""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("Acerca de Sistema de Alertas Geot√©cnicas")
        self.setFixedSize(500, 450)
        self.setModal(True)
        
        # Aplicar estilos centralizados
        self.setStyleSheet(DialogStyles.get_complete_dialog_styles())
        
        self.setup_ui()
        
    def setup_ui(self):
        """Configurar la interfaz del di√°logo"""
        layout = QVBoxLayout(self)
        layout.setSpacing(15)
        layout.setContentsMargins(20, 20, 20, 20)
        
        # T√≠tulo principal
        title_label = QLabel("Sistema de Alertas Geot√©cnicas")
        title_label.setAlignment(Qt.AlignCenter)
        title_label.setProperty("aboutTitle", True)  # Usar propiedad CSS
        layout.addWidget(title_label)
        
        # Versi√≥n
        version_label = QLabel(f"Versi√≥n {APP_VERSION}")
        version_label.setAlignment(Qt.AlignCenter)
        version_label.setProperty("aboutVersion", True)  # Usar propiedad CSS
        layout.addWidget(version_label)
        
        # Descripci√≥n y caracter√≠sticas
        info_text = QTextEdit()
        info_text.setReadOnly(True)
        info_text.setMaximumHeight(220)
        info_text.setProperty("aboutInfo", True)  # Usar propiedad CSS
        
        info_content = """
        <p><b>Descripci√≥n:</b><br>
        Aplicaci√≥n para el registro, seguimiento y an√°lisis de alertas geot√©cnicas con interfaz intuitiva y herramientas de visualizaci√≥n avanzadas.</p>
        
        <p><b>Caracter√≠sticas principales:</b></p>
        <ul style="margin-left: 20px;">
        <li>üìä Dashboard interactivo con gr√°ficos en tiempo real</li>
        <li>üö® Registro de alertas con clasificaci√≥n por colores (Roja, Amarilla, Naranja)</li>
        <li>üìà An√°lisis y filtrado de datos por a√±o, mes y tipo de alerta</li>
        <li>üìÅ Importaci√≥n/Exportaci√≥n de datos Excel</li>
        <li>üë§ Sistema de autenticaci√≥n y gesti√≥n de usuarios</li>
        <li>üóÑÔ∏è Integraci√≥n con bases de datos SQL Server</li>
        <li>üîç Herramientas de b√∫squeda y filtrado avanzado</li>
        </ul>
        
        <p><b>Tecnolog√≠as utilizadas:</b><br>
        Python 3.12, PySide6, Pandas, Matplotlib, OpenPyXL</p>
        """
        
        info_text.setHtml(info_content)
        layout.addWidget(info_text)
        
        # Informaci√≥n del desarrollador
        developer_label = QLabel("Desarrollado por: <b>Bruno Oviedo</b> ¬© 2025")
        developer_label.setAlignment(Qt.AlignCenter)
        developer_label.setProperty("aboutDeveloper", True)  # Usar propiedad CSS
        layout.addWidget(developer_label)
        
        # Botones de acci√≥n
        button_layout = QHBoxLayout()
        
        # Bot√≥n de verificar actualizaciones
        update_button = QPushButton("üîÑ Verificar Actualizaciones")
        update_button.setFixedSize(180, 35)
        update_button.setProperty("aboutUpdate", True)  # Usar propiedad CSS
        update_button.clicked.connect(self.check_for_updates)
        
        # Bot√≥n de cerrar
        close_button = QPushButton("Cerrar")
        close_button.setFixedSize(100, 35)
        close_button.setProperty("aboutClose", True)  # Usar propiedad CSS
        close_button.clicked.connect(self.accept)
        
        button_layout.addStretch()
        button_layout.addWidget(update_button)
        button_layout.addWidget(close_button)
        button_layout.addStretch()
        layout.addLayout(button_layout)
        
    def check_for_updates(self):
        """Verificar actualizaciones manualmente desde el di√°logo About"""
        try:
            from PySide6.QtWidgets import QMessageBox
            from src.utils.updater import UpdateChecker
            from src.utils.version import UPDATE_SERVER_URL
            
            # Cambiar texto del bot√≥n mientras verifica
            sender = self.sender()
            original_text = sender.text()
            sender.setText("‚è≥ Verificando...")
            sender.setEnabled(False)
            
            # Procesar eventos para mostrar el cambio
            from PySide6.QtWidgets import QApplication
            QApplication.processEvents()
            
            # Verificar actualizaciones
            checker = UpdateChecker(APP_VERSION, UPDATE_SERVER_URL)
            update_info = checker.check_for_updates()
            
            # Restaurar bot√≥n
            sender.setText(original_text)
            sender.setEnabled(True)
            
            if update_info:
                # Mostrar di√°logo de actualizaci√≥n disponible
                reply = QMessageBox.question(
                    self,
                    "Actualizaci√≥n Disponible",
                    f"üÜï Nueva versi√≥n disponible: v{update_info['version']}\n\n"
                    f"Versi√≥n actual: v{APP_VERSION}\n"
                    f"Versi√≥n disponible: v{update_info['version']}\n\n"
                    f"¬øDesea descargar la actualizaci√≥n ahora?",
                    QMessageBox.Yes | QMessageBox.No,
                    QMessageBox.Yes
                )
                
                if reply == QMessageBox.Yes:
                    # Iniciar proceso de actualizaci√≥n
                    from src.utils.updater import AutoUpdater
                    updater = AutoUpdater(APP_VERSION, UPDATE_SERVER_URL, self.parent())
                    updater.start_update_process(update_info)
                    
            else:
                # No hay actualizaciones
                QMessageBox.information(
                    self,
                    "Sin Actualizaciones",
                    f"‚úÖ Su aplicaci√≥n est√° actualizada\n\nVersi√≥n actual: v{APP_VERSION}"
                )
                
        except Exception as e:
            QMessageBox.warning(
                self,
                "Error de Conexi√≥n",
                f"‚ö†Ô∏è No se pudo verificar actualizaciones:\n{str(e)}\n\n"
                f"Verifique su conexi√≥n a Internet e intente nuevamente."
            )
            
            # Restaurar bot√≥n en caso de error
            if 'sender' in locals():
                sender.setText(original_text)
                sender.setEnabled(True)
    
    @staticmethod
    def show_about(parent=None):
        """M√©todo est√°tico para mostrar el di√°logo"""
        dialog = AboutDialog(parent)
        dialog.exec()
